
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: /home/notebook/work/Q3.ipynb

from pyspark.sql.functions import col
from pyspark.sql import *

def user():
    # Returns a string consisting of your GT username.
    return 'smhasawade6'

def long_trips(trips):
    # Returns a Dataframe with Schema the same as :trips:
    filter_trips = trips.filter(trips.trip_distance >= 2)
    return filter_trips

def manhattan_trips(trips, lookup):
    lookup = lookup.filter(col("Borough") =="Manhattan")
    top_trips = lookup.join(trips, lookup.LocationID == trips.DOLocationID, 'inner')
    top_trips = top_trips.withColumn("Passenger_count", top_trips["Passenger_count"].cast("int"))
    top_trips = top_trips.groupBy("DOLocationID").sum('Passenger_count').select(col("DOLocationID"),col("sum(Passenger_count)").alias("pcount")).orderBy(["pcount"], ascending=[0])
    return top_trips.limit(20)

def weighted_profit(trips, mtrips):
    weighted = trips.join(mtrips,mtrips.DOLocationID ==trips.DOLocationID, 'left_outer')
    proportion = trips.join(mtrips,mtrips.DOLocationID==trips.DOLocationID, 'inner')
    proportion = proportion.groupBy("PULocationID").count().select(col("PULocationID"),col("count").alias("proportion"))
    weighted = weighted.groupBy("PULocationID").agg({'total_amount':'avg', '*':'count'}).select(col("PULocationID"),col("count(1)").alias("count"),col("avg(total_amount)").alias("total_amount"))
    weighted = weighted.withColumnRenamed('PULocationID', 'PULocationID2')
    final = weighted.join(proportion,weighted.PULocationID2==proportion.PULocationID, 'inner')
    final = final.withColumn("weighted_profit", (col("total_amount")*col("proportion")/col("count")))
    final = final.select(col("PULocationID"),col("weighted_profit").cast("decimal(30,15)"))
    return final

def final_output(calc, lookup):
    # Returns a Dataframe with Schema: Zone, Borough, weighted_profit
    # Note: Use decimal datatype for weighted profit (NOTE: DON'T USE FLOAT)
    # Our grader will be only be checking the first 8 characters for each value in the dataframe
    final = calc.join(lookup, calc.PULocationID==lookup.LocationID,"inner")
    final = final.select("Zone", "Borough", "weighted_profit").orderBy(["weighted_profit"],ascending=[0])
    return final.limit(20)